@using CareerExplorer.Core.Enums;
@using CareerExplorer.Web.DTO
@using Microsoft.AspNetCore.Identity;
@using CareerExplorer.Shared;
@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer
@model PaginatedList<VacancyDTO>

<div class="row">
    <div class="col-md-8">

        @foreach(var vacancy in Model)
        {
            <div style="padding:1rem;">
                <div class="row">
                    <div class="col-8">
                        <a style="font-size:20px;" class="link-dark" asp-controller="Vacancy" asp-action="GetVacancy" asp-route-id="@vacancy.Id">@vacancy.Position.Name</a>
                        <br/>
                        <span>@vacancy.CreatorNickName</span>
                    </div>
                    <div class="col-4">
                        @*views*@
                    </div>
                </div>
                <hr/>
                <p class="description-container" style="color:#000;margin-bottom:0px;">@vacancy.Description</p>
                <a class="expand-btn" style="text-decoration:none;font-size:20px;line-height:1;">...</a>
                <div class="row">
                    <div class="col-8">
                        <span>@vacancy.CompanyName @vacancy.CreatorName @vacancy.CreatorSurname</span>
                    </div>
                    <div class="col-4">
                        <span>@vacancy.CreatedDate.ToShortDateString()</span>
                    </div>
                </div>

            </div>
        }
    </div>
    <div class="col-md-4">
        <div class="filtering-box mb-2">
            <span style="color:#fff;" >Filter by skills</span><br />
            @foreach(var tag in ViewBag.Tags)
            {
                <button data-tag-id=@tag.Value style="display:inline-block;margin:0.1rem;border-radius:5%;" class="btn btn-light tag-btn">@tag.Text</button>
            }
        </div>
        <div class="filtering-box">
            <button class="btn btn-light type-btn" data-type=@((int)WorkType.Remote)>Remote</button>
            <button class="btn btn-light type-btn" data-type=@((int)WorkType.Office)>Office</button>
            <button class="btn btn-light type-btn" data-type=@((int)WorkType.OfficeRemote)>Remote/Office</button>
        </div>
    </div>
    <div>
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link navig-link" data-page-number=@(Model.PageIndex - 1)>&laquo;</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">&laquo;</span>
                </li>
            }
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                if (i == Model.PageIndex)
                {
                    <li class="page-item active">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a data-page-number=@i class="page-link navig-link">@i</a>
                    </li>
                }
            }
            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link navig-link" data-page-number=@(Model.PageIndex + 1)>&raquo;</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">&raquo;</span>
                </li>
            }
        </ul>
    </div>
</div>
<style>
    .filtering-box {
        background-color: #1a1a1a;
        border-radius: 1%;
        width: 100%;
        padding: 3%;
    }
    .btn-custom {
        background-color: #343a40;
    }

    .btn-custom span {
        margin-left: 5px;
        color: #fff;
    }

    .description-container {
        height: 100px;
        overflow: hidden;
    }

        .description-container.expanded {
            height: auto;
        }
</style>
@section Scripts {
    <script>
        const expandBtns = document.querySelectorAll('.expand-btn');
        expandBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                btn.previousElementSibling.classList.toggle('expanded');
            });
        });
        //filtering
        const savedTagIds = sessionStorage.getItem('selectedTagIds');
        const savedTypes = sessionStorage.getItem('selectedTypes');
        const selectedTagIds = new Set();
        const selectedTypes = new Set();
        if (savedTagIds) {
            savedTagIds.split(',').forEach(id => selectedTagIds.add(parseInt(id)));
        }
        if(savedTypes) {
            savedTypes.split(',').forEach(num => selectedTypes.add(parseInt(num)));
        }

        function updateUrlAndNavigate() {
            //const pageNumber = @Model.PageIndex;
            const tagIds = Array.from(selectedTagIds);
            const types = Array.from(selectedTypes);
            const url = `@Url.Action("GetAll")?pageNumber=${1}&tagIds=${tagIds.join(',')}&types=${types.join(',')}`;
            window.location.href = url;
        }
        function saveSelectedTagIdsInSession() {
            const tagIdsString = Array.from(selectedTagIds).join(',');
            sessionStorage.setItem('selectedTagIds', tagIdsString);
        }
        function saveSelectedTypesInSession() {
            const typesString = Array.from(selectedTypes).join(',');
            sessionStorage.setItem('selectedTypes', typesString);
        }
        const tagBtns = document.querySelectorAll('.tag-btn');
        tagBtns.forEach(btn => {
            if (!selectedTagIds.has(parseInt(btn.dataset.tagId))) {
                btn.addEventListener('click', () => {
                const tagId = parseInt(btn.dataset.tagId);
                
                selectedTagIds.add(tagId);

                updateUrlAndNavigate();
                saveSelectedTagIdsInSession();
                });
            } else {
                btn.innerHTML += '<span>&times;</span>';
                btn.setAttribute("class", "btn btn-custom");
                btn.addEventListener('click', () => {
                    const tagId = parseInt(btn.dataset.tagId);
                    selectedTagIds.delete(tagId);
                    updateUrlAndNavigate();
                    saveSelectedTagIdsInSession();
                });
            }
        });

        const typeBtns = document.querySelectorAll('.type-btn');
        typeBtns.forEach(btn => {
            if(!selectedTypes.has(parseInt(btn.dataset.type))){
                btn.addEventListener('click', () => {
                    const typeNum = parseInt(btn.dataset.type);

                    selectedTypes.add(typeNum);

                    updateUrlAndNavigate();
                    saveSelectedTypesInSession();
                });
            }
            else {
                btn.innerHTML += '<span>&times;</span>';
                btn.setAttribute("class", "btn btn-custom");
                btn.addEventListener('click', () => {
                    const type = parseInt(btn.dataset.type);
                    selectedTypes.delete(type);
                    updateUrlAndNavigate();
                    saveSelectedTypesInSession();
                });
            }
        });

        const navigationElements = document.querySelectorAll(".navig-link");

        navigationElements.forEach(link => {
                link.addEventListener('click', () => {
                    const pageNumber = parseInt(link.dataset.pageNumber);
                    const tagIds = Array.from(selectedTagIds);
                    const url = `@Url.Action("GetAll")?pageNumber=${pageNumber}&tagIds=${tagIds.join(',')}`;
                    window.location.href = url;
                });
        });
        
    </script>
}
