@using CareerExplorer.Web.DTO
@using Microsoft.AspNetCore.Identity;
@using CareerExplorer.Shared;
@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer
@model PaginatedList<VacancyDTO>

<div class="row">
    <div class="col-md-8">
        @foreach (var vacancy in Model)
        {
            <div class="card text-white bg-primary mb-3">
                <div class="card-header text-white">
                    <a class="link-light" asp-controller="Vacancy" asp-action="GetVacancy" asp-route-id="@vacancy.Id">@vacancy.Title</a>
                </div>
                <div class="card-body description-container">
                    <p class="card-text">@vacancy.Description</p>
                </div>
                <button class="expand-btn btn btn-primary w-25">@Localizer["Read More"]</button>
                <div class="card-footer">
                    @vacancy.CompanyName @vacancy.CreatorName @vacancy.CreatorSurname
                    @foreach(var tag in vacancy.Requirements)
                    {
                        <span>@tag.Title</span>
                    }
                    
                </div>

            </div>
        }
    </div>
    <div class="col-md-4">
        <div class="filtering-box">
            <span style="color:#fff;" >Filter by skills</span><br />
            @foreach(var tag in ViewBag.Tags)
            {
                <button data-tag-id=@tag.Value style="display:inline-block;margin:0.1rem;border-radius:5%;" class="btn btn-light tag-btn">@tag.Text</button>
            }
        </div>
    </div>
    <div>
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link navig-link" data-page-number=@(Model.PageIndex - 1)>&laquo;</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">&laquo;</span>
                </li>
            }
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                if (i == Model.PageIndex)
                {
                    <li class="page-item active">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a data-page-number=@i class="page-link navig-link">@i</a>
                    </li>
                }
            }
            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link navig-link" data-page-number=@(Model.PageIndex + 1)>&raquo;</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">&raquo;</span>
                </li>
            }
        </ul>
    </div>
</div>
<style>
    .filtering-box {
        background-color: #1a1a1a;
        border-radius: 1%;
        width: 100%;
        padding: 3%;
    }
    .btn-custom {
        background-color: #343a40;
    }

    .btn-custom span {
        margin-left: 5px;
        color: #fff;
    }
</style>
@section Scripts {
    <script>
        const expandBtns = document.querySelectorAll('.expand-btn');
        expandBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                btn.previousElementSibling.classList.toggle('expanded');
                btn.textContent = btn.textContent === '@Localizer["Read More"]' ? '@Localizer["Read Less"]' : '@Localizer["Read More"]';
            });
        });
        //filtering
        function setCookie(name, value, days) {
            document.cookie = `${name}=${value};expires="";path=/`;
        };

        function getCookie(name) {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.startsWith(`${name}=`)) {
                    return cookie.substring(name.length + 1);
                };
            }
            return null;
        };
        const savedTagIds = getCookie('selectedTagIds');
        console.log(savedTagIds);
        const selectedTagIds = new Set();
        if (savedTagIds) {
            savedTagIds.split(',').forEach(id => selectedTagIds.add(parseInt(id)));
        }

        function updateUrlAndNavigate() {
            const pageNumber = @Model.PageIndex;
            const tagIds = Array.from(selectedTagIds);
            console.log(tagIds);
            const url = `@Url.Action("GetAll")?pageNumber=${pageNumber}&tagIds=${tagIds.join(',')}`;
            window.location.href = url;
        }
        function saveSelectedTagIdsInCookie() {
            const tagIdsString = Array.from(selectedTagIds).join(',');
            setCookie('selectedTagIds', tagIdsString, 365);
        }
        const tagBtns = document.querySelectorAll('.tag-btn');
        tagBtns.forEach(btn => {
            console.log(selectedTagIds.has(parseInt(btn.dataset.tagId)))
            if (!selectedTagIds.has(parseInt(btn.dataset.tagId))) {
                btn.addEventListener('click', () => {
                btn.classList.toggle('btn-primary');
                btn.classList.toggle('btn-secondary');

                const tagId = parseInt(btn.dataset.tagId);
                
                selectedTagIds.add(tagId);

                updateUrlAndNavigate();
                saveSelectedTagIdsInCookie();
                });
            } else {
                btn.innerHTML += '<span>&times;</span>';
                btn.setAttribute("class", "btn btn-custom");
                btn.addEventListener('click', () => {
                    const tagId = parseInt(btn.dataset.tagId);
                    selectedTagIds.delete(tagId);
                    updateUrlAndNavigate();
                    saveSelectedTagIdsInCookie();
                });
            }
        });
        const navigationElements = document.querySelectorAll(".navig-link");

        navigationElements.forEach(link => {
                link.addEventListener('click', () => {
                    const pageNumber = parseInt(link.dataset.pageNumber);
                    const tagIds = Array.from(selectedTagIds);
                    const url = `@Url.Action("GetAll")?pageNumber=${pageNumber}&tagIds=${tagIds.join(',')}`;
                    window.location.href = url;
                });
        });
        
    </script>
}

<style>
    .description-container {
        height: 100px;
        overflow: hidden;
    }

        .description-container.expanded {
            height: auto;
        }

    .expand-btn {
        margin-top: 10px;
    }
</style>